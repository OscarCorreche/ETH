// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract alkansya {
    address payable public Oscar;

    event Deposited(address indexed from, uint amount);
    event Withdrawn(address indexed to, uint amount);

    constructor() {
        Oscar = payable(msg.sender);
    }

    function deposit() public payable {
        require(msg.value >= 2, "The value must be greater than 2" );
        emit Deposited(msg.sender, msg.value);
    }

    function withdraw() public {
        require(msg.sender == Oscar);
        uint balance = address(this).balance;
        require(balance >= 5, "The value must be greater than 5 to withdraw");
        Oscar.transfer(balance);
        emit Withdrawn(Oscar, balance);
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    receive() external payable {
        emit Deposited(msg.sender, msg.value);
    }
}
